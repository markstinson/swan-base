#!/bin/bash

installed_db="/etc/setup/installed.db"
timestamp="/etc/setup/timestamp"
setup_rc="/etc/setup/setup.rc"
spm_cache="$HOME/.cache/spm"
available="$spm_cache/available"
installed="$spm_cache/installed"

mkdir -p "$spm_cache"
# verbose output
verbose=no
function say() {
    if [ "$verbose" = "yes" ]; then echo $1 >&2; fi
}

# list files in package
function list() {
    for pkg; do
        cygcheck -l "$pkg"
    done | sort -u
}

# find package that owns file
function owns() {
    for fil; do
        ownz="$(cygcheck -f "$fil" | sed -s 's/\n//g')"
        [ -z "$ownz" ] && return 1
        grep "$ownz" "$installed_db" | awk -F\  '{x=$2;sub(/\.tar.*$/,"",x);sub($1"-","",x);print $1}'
    done | sort -u
}

function is_installed() {
    if [ -z "$(grep "^$1\s$1" "$installed_db")" ]; then
        return 1
    fi
    return 0
}

function encode() {
    echo $1 | sed -e 's/\//%2f/g' -e 's/:/%3a/g'
}

function get_installed() {
    grep -v "INSTALLED.DB" "$installed_db" | awk -F\  '{x=$2;sub(/\.tar.*$/,"",x);sub($1"-","",x);print $1" "x}'
}

function get_setup() {
    say "fetching setup for $2"
    setup_ini="$1/$(encode "$2")/x86_64/setup.ini"
    if [ -e "$setup_ini" ]; then
        cat "$setup_ini"
    else
        wget -O - -o /dev/null "$2/x86_64/setup.bz2" | bunzip2
    fi
}

function get_setuprc_section() {
    say "fetching setup.rc section $1"
    section="$1"
    awk -F"\t" "/^\t/{if (s==\"$section\") {print \$2}} /^\\S.*/{s=\$1}" "$setup_rc"
}

for mirror in $(get_setuprc_section last-mirror); do
    if [[ "$mirror" != *"sirius.starlig.ht"* ]] && [[ "$mirror" != *"cygwinports"* ]]; then
        main_mirror="$mirror"
    fi
done

function generate_caches() {
    if [ ! -e "$available" ] || [ "$timestamp" -nt "$available" ]; then
        say "cache not found..regenerating"
        mkdir -p "$spm_cache"
        rm -f "$available"
        last_cache="$(cygpath $(get_setuprc_section last-cache))"
        for mirror in $(get_setuprc_section last-mirror); do
            get_setup "$last_cache" "$mirror" | grep -v -e '^#' -e '^release' -e '^arch' -e '^setup-' -e '^install:' -e '^source:' >> "$available"
        done
        rm -f "$installed"
        installed_pkgs="$(get_installed | sed 's/\+/\\+/g')"
        reg1=${installed_pkgs// /$'\\n'.*version: }
        pkg_record "^(${reg1//$'\n'/|})" 0 "$available" > "$installed"
        say "finished generating"
    fi
}

# pkg_record REGEX ICASE? TARGET
function pkg_record() {
    generate_caches
    rs='\n@ '
    awk "BEGIN { IGNORECASE=$2; RS=\"$rs\" } /$1/{ print \"$rs\"\$0}" "$3"
}

function dependencies_of() {
    if is_installed $1; then
        target="$installed"
    else
        target="$available"
    fi
    pkg_record "^$1\\n" 0 "$target" | grep "requires: " | sed -e 's/requires: //' -e 's/ \+/\n/g' | sort -u
}

function recursive_dependencies_of() {
    found="$1 $2"
    for dep in $(dependencies_of $1); do
        if [[ " $found " != *" $dep "* ]]; then
            found="$(recursive_dependencies_of "$dep" "$found")"
        fi
    done
    echo $found
}

function recursive_missing_dependencies_of() {
    found="$1 $2"
    for dep in $(dependencies_of $1); do
        if [[ " $found " != *" $dep "* ]] && ! is_installed $dep; then
            found="$(recursive_missing_dependencies_of "$dep" "$found")"
        fi
    done
    echo $found
}

function get_base() {
    pkg_record "category:.*\s(Base|_PostInstallLast)" 0 "$installed" | grep ^@ | awk -F\  '{print $2}' | sort -u
}

function top_level_pkgs() {
    installed_pkgs="$(get_installed | awk -F\  '{print $1}')"
    base_pkgs="$(get_base)"
    search_re="requires:.*\\s(${installed_pkgs//[[:space:]]/|})\\s*\\n*"
    orphans_tmp=$(mktemp /tmp/spm.XXXXXX)
    pkg_record "$search_re" 0 "$installed" | awk '/^requires:/{x=$0;sub(/^requires:\s*/,"",x);gsub(/\s/,"\n",x);print x}' | sort -u > "$orphans_tmp"
    orphans_tmp2=$(mktemp /tmp/spm.XXXXXX)
    echo -e "$installed_pkgs\n$base_pkgs" | sort - "$orphans_tmp" | uniq -u > $orphans_tmp2
    echo -e "$installed_pkgs\n" | sort - "$orphans_tmp2" | uniq -d
    rm "$orphans_tmp" "$orphans_tmp2"
}

function reverse_dependencies_of() {
    pkg_record "\\nrequires:.*\\s+$1\\s+.*version:" 0 "$2" | grep ^@ | awk -F\  '{print $2}' | sort -u
}

function find_islands() {
    tpkgs="$(top_level_pkgs) $(get_base)"
    pkgs="$($0 -D $tpkgs)"
    echo "$pkgs $tpkgs $(get_installed | awk -F\  '{print $1}')" | sed -e 's/ \+/\n/g' | sort | uniq -u
}

function user_search() {
    pkg_record "^\\S*$1\\S*\\n|sdesc: \".*$1.*\"|ldesc: \".*$1.*\"" 1 "$available"
}

# help message
function usage() {
    cat <<EOF
Usage:
    spm [OPTIONS] [PACKAGE[ PACKAGE...]]
Options:
    -h, --help                      this help message
    -l, --list PACKAGE...           list files in PACKAGE(s)
    -o, --owns FILE...              find package that owns FILE
    -d, --deps PACKAGE...           find dependencies of PACKAGE(s)
    -D, --deps-all PACKAGE...       find dependencies of PACKAGE(s) recursively
    -m, --missing PACKAGE...        find missing dependencies of PACKAGE(s) recursively
    -n, --needs PACKAGE...          list installed packages that depend on PACKAGE(s)
    -N, --needs-all PACKAGE...      list available packages that depend on PACKAGE(s)
    -t, --top                       list top-level (orphaned) packages
    -I, --islands                   list package islands (circular dependency) [slow]
    -s, --status REGEX              list installed packages where name matches regex
    -S, --search REGEX              search available packages
    -c, --clean                     clean package cache
    -i, --install PACKAGE...        install PACKAGE(s)
    -r, --remove PACKAGE...         remove PACKAGE(s)
    -R, --remove-all PACKAGE...     remove PACKAGE(s) recursively
    -u, --update                    update installed packages
    -w, --wait                      wait for package install/remove to finish
    -M, --manager                   open cygwin package selector before continuing
    -C, --change-mirror http://...  change the main cygwin package mirror
    -b, --base                      list base packages
EOF
}
cmd_suffix="-B "
# get command options
OPTS=`getopt -n 'spm' -o h,v,l,o,d,D,m,t,n,N,I,s,S,c,i,r,u,R,w,M,C,b -l help,verbose,list,owns,deps,deps-all,missing,top,needs,needs-all,islands,status,search,clean,install,remove,update,remove-all,wait,manager,change-mirror,base -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTS"
while true ; do
    case "$1" in
    -h|--help)
        usage
        break;;
    -v|--verbose)
        shift
        verbose=yes;;
    -l|--list)
        shift 2
        list $@
        break;;
    -o|--owns)
        shift 2
        owns $@
        break;;
    -d|--deps)
        shift 2
        for pkg do dependencies_of $pkg; done | sort -u
        break;;
    -D|--deps-all)
        shift 2
        for pkg; do
            found0="$(recursive_dependencies_of "$pkg" "$found0")"
        done
        args="$@"
        echo $found0 | sed -e 's/ \+/\n/g' | grep -ve "^${args// /\$\\|^}$" | sort -u
        break;;
    -t|--top)
        shift 2
        top_level_pkgs
        break;;
    -m|--missing)
        shift 2
        for pkg; do
            found0="$(recursive_missing_dependencies_of "$pkg" "$found0")"
        done
        args="$@"
        echo $found0 | sed -e 's/ \+/\n/g' | grep -ve "^${args// /\$\\|^}$" | sort -u
        break;;
    -n|--needs)
        shift 2
        for pkg do reverse_dependencies_of "$pkg" "$installed"; done | sort -u
        break;;
    -N|--needs-all)
        shift 2
        for pkg do reverse_dependencies_of "$pkg" "$available"; done | sort -u
        break;;
    -I|--islands)
        shift 2
        find_islands
        break;;
    -S|--search)
        shift 2
        user_search $@
        break;;
    -s|--status)
        shift 2
        get_installed | awk -F\  '{print $1}' | grep -e "$1"
        break;;
    -c|--clean)
        shift
        cd "$spm_cache" &&
        for i in $(find . -maxdepth 1 -type d -name '??*'); do 
            rm -r "$i"
        done
	rm wget-log* -f
        break;;
    -i|--install)
        shift 2
        args="$@"
        cmd_suffix+="-P ${args// /,} "
        do_cygsetup=1
        break;;
    -r|--remove)
        shift 2
        args="$@"
        cmd_suffix+="-x ${args// /,} "
        do_cygsetup=1
        break;;
    -u|--update)
        shift
        cmd_suffix+="-g "
        do_cygsetup=1;;
    -R|--remove-all)
        shift 2
        args="$@"
        for pkg; do
            needed="$(spm -n $pkg)"
            if [ -n "$needed" ]; then
                echo -e "$pkg needed by:\n$needed"
                exit 1
            fi
        done
        bpkgs="$(get_base)"
        pkgs="$(spm -D $args | grep -v "^${bpkgs//$'\n'/\$\\|^}$")"
        cmd_suffix+="-x ${args// /,},${pkgs//$'\n'/,} "
        do_cygsetup=1
        break;;
    -w|--wait)
        shift
        cmd_suffix+="-W "
        start_args+="-w ";;
    -C|--change-mirror)
        shift 2
        main_mirror="$1"
        do_cygsetup=1
        break;;
    -b|--base)
	shift
	echo "$(get_base)"
	break;;
    -M|--manager)
        shift
        cmd_suffix+="-M ";;
    --) shift; break;;
     *) echo "Internal error!"; exit 1;;
    esac
done

[ -z "$do_cygsetup" ] && exit 0
cygarch=$(uname -m)
cygexe="setup-$cygarch.exe"
cygurl="http://cygwin.com/$cygexe"
base_cmd="$spm_cache/$cygexe -Ovqn -l $(cygpath -w $spm_cache) -R $(cygpath -w /) -a $cygarch \
        -s $main_mirror \
        -s http://sirius.starlig.ht/ -K http://sirius.starlig.ht/sirius.gpg"
mkdir -p "$spm_cache"
cd "$spm_cache"
# download setup.exe (if newer)
wget -nv -N $cygurl
chmod +x "$cygexe"
if [ -n "$isadmin" ]; then
    chmod -R +wX /var/cache/rebase
fi

say "cygstart $start_args -- $cmd_prefix $base_cmd $cmd_suffix"

cygstart $start_args -- $cmd_prefix $base_cmd $cmd_suffix

